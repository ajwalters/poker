- var heading = ['Current','Backlog','Icebox'];
mixin stories(stories)
  ul#stories
    each story in stories.story
      li(class='story #{story.story_type} #{story.current_state}')
        - if(story.estimate != undefined)
          a.estimate
            - if(story.estimate.$t == '-1')
              strong( data-story='#{story.id.$t}') estimate
            - else
              = story.estimate['$t']+" points"
        - else
          a.type= story.story_type
        a(href='#{story.url}', class='title')= story.name
        - if(typeof(story.description) == "string")
          .description
            = story.description
            - if(story.notes != undefined)
              - each note in story.notes.note
                p.note= note.text
                  a= note.author
        - else
          .description
            - if(story.notes != undefined)
              - each note in story.notes.note
                p.note= note.text
                  a= note.author

h1#click= tracker.name
dl#project
  dt Velocity
  dd= tracker.current_velocity
  - if (current != undefined)
    dt Iteration Finish
    - var finish = new Date(current.finish.$t);
    dd
      = finish.toDateString();
      small= " ("+daysLeft(current.finish.$t)+ " days left)";
menu.opt_list
  |Toggle:
  li.button.opt 
    a.toggle('data-element'='.accepted') accepted
  li.button.opt 
    a.toggle('data-element'='.delivered') delivered
  li.button.opt 
    a.toggle('data-element'='.finished') finished
  li.button.opt 
    a.toggle('data-element'='.started') started
  li.button.opt 
    a.toggle('data-element'='.unstarted') unstarted
  li.button.opt 
    a.toggle('data-element'='.feature') feature
  li.button.opt 
    a.toggle('data-element'='.bug') bug
  li.button.opt 
    a.toggle('data-element'='.chore') chore
  li.button.opt 
    a.toggle('data-element'='header') header
- each iteration,index in iterations
  - if(!iteration.type)
    h2= heading[index]
    mixin stories(iteration.stories)
a.button(href = '/trackers/icebox') Show me the icebox
script(src="http://majek.github.com/sockjs-client/sockjs-latest.min.js")
script(src="/js/poker.js")
script
  var sock = new SockJS('http://rsp.pinmonkey.com:3000/sock');
  sock.onopen = function() {
    console.log('open');
  };
  sock.onmessage = function(message) {
    console.log(message.data);
    var results = JSON.parse(message.data);
    switch(results.type){
    case "estimate":
        $('.game_board').html('<a class="close">close</a><ol class="result"></ol>');
        for(key in results.results){
          if(results.results[key] !== null && results.results[key] > 0){
            size = results.results[key];
            $('.result').append('<li class="size_'+size+'">'+key+'<small>'+size+'</small></li>');
          }
        }
        $('.close').click(function(){$('.game_board').remove();});
      break;
    default:
      console.log('default');
    }
    console.log('received: ' + JSON.stringify(message.data));
  };
  sock.onclose = function(m) {
    $('.game_board').remove();
    return sock = new SockJS('http://rsp.pinmonkey.com:3000/sock');
  };

  $('.toggle').click(function(ev){
    ev.preventDefault();
    $($(this).data('element')).toggle();
    $(this).parent('li').toggleClass('off');
  });

  $('.estimate strong').click(function(e){
    e.preventDefault();
    new Game(this, sock);
  });

  $('.story').click(function(ev){
    $(this).children('.description').toggle();
  });
